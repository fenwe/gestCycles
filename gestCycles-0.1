/*!
fichier: gestCycles-0.1.js
version:0.1
auteur:pascal TOLEDO
date: 2012.12.02
source: http://legral.fr/intersites/lib/perso/js/
depend de:
  * gestLib (facultatif)
description:
* appelle une fonction par cycle avec le meme ecart temps entre les 2 appels en soustrayant le temps d'execution de la fonction de la consigne
 exemple: votre fcrt doit etre appellé toutes les 100ms mais votre function dure 80ms. Le prochain appelles, se fera donc 20ms apres la fin de l'appel precedent.
vous etes assuréez d'etre au plus pres du temps consigne tant que la duree de votre fonction ne depasse pas votre consigne.

* calcul de la moyenne de la duree de la fonction
 Le nombre de point de la moyenne est parametrable. Plus il y a de point plus la moyenne est fidele mais un trop grand nombre de points augment le temps d'excution de la fonction

bug:
* la pause n'est pas operationnelle
*/

if(typeof(gestLib)==='object')gestLib.loadLib({nom:'gestCycles',ver:0.1,description:'calcul de temps d\'iterations'});
gestCycle=function(init)
	{
	if(!init){init={};}
	//public
	this.consigne=(init.consigne)?init.consigne:1000;	// consigne entre 2 appelles 
	this.callback=(init.callback)?init.callback:'';	// nom de la fonction(en txt) a appelle qd la consigne est atteinte
	//prive
	this.dt=null;
	this.timerId=null;
	this.etat=0;			// 0: stop;1:start;
	this.reel=0;			// consigne reel d'un cycle
	this.timeStamp_deb=0;	// 
	this.delta=0;			// diff de temps entre la consigne et la duree du cycle reel
	this.iteration=0;
	this.peakMin=undefined;	// valeur min atteinte sur tous les cycles
	this.peakMax=0;		// valeur max atteinte
	this.points=Array();	// pile de valeur courante
	this.avg_pointsNb=0;
	this.avg_pointsMax=(init.avg_pointsMax)?init.avg_pointsMax:100;	//nbre de point max pour calc la moyenne
	this.start=function()	// 
		{
		dt=new Date();
		this.timeStamp_deb=dt.getTime();
		//if(this.timerId!==null)
			{clearTimeout(this.timerId);}
//		this.timerId=setTimeout(this.callback,this.delta);
		}

	//arrette le cycle et calcul sa duree	
	this.stop=function()	// 
		{
		this.iteration++;
		if(this.timerId!==null){clearTimeout(this.timerId);this.timerId=null;}
		dt=new Date();
		this.reel=dt.getTime()-this.timeStamp_deb;
		if(this.reel>this.peakMax){this.peakMax=this.reel;}
		if(this.peakMin===undefined){this.peakMin=this.reel;}
		if(this.reel<this.peakMin){this.peakMin=this.reel;}
		this.delta=this.consigne-this.reel;
		this.points[this.avg_pointsNb++]=this.reel;
		if(this.avg_pointsNb>=this.avg_pointsMax){this.avg_pointsNb=0;this.points=Array();}
		}
	this.isPause=0;

	//par defaut switch l'etat de pause
	this.setPause=function(on)
		{
		switch(on)
			{
			case 1:this.isPause=1;break;
			case 0:this.isPause=0;
				//relance le timer si la pause a ete trop longue
				break;
			default:this.isPause=(this.isPause===1)?0:1;
			//test: affiche l'etat du timeur qd depasser
//			gestLib.inspect({lib:'gestCycles',varNom:'this.timerId',varPtr:this.timerId})
			}		
		}

	this.next=function(){this.stop();this.timerId=setTimeout(this.callback,this.delta);}
	this.avg=function(){var m=0;var nb=0;for(var pt in this.points){if(typeof(pt!=='undefined')){m+=this.points[pt];nb++;}}return m/nb;}
	}

/* ************************************************************
   ***********************************************************/
if(typeof(gestLib)==='object')gestLib.end('gestCycles');
